# TODO: Reuse fields from the base class

scalar Date

enum Order {
  asc
  desc
}

enum ListingOrderBy {
  createdAt
  updatedAt
  minimumNights
  maximumNights
  accommodates
  bedrooms
  beds
  bathrooms
}

type Listing {
  id: ID!
  listingUrl: String!
  name: String!
  summary: String!
  space: String!
  description: String!
  propertyType: String!
  notes: String!
  transit: String!
  roomType: String!
  bedType: String!
  minimumNights: Int!
  maximumNights: Int!
  cancellationPolicy: String!
  accommodates: Int!
  bedrooms: Float!
  beds: Int!
  bathrooms: Float!
  createdAt: Date!
  updatedAt: Date!
  amenities: [String]
  neighborhoodOverview: String
  access: String
  interaction: String
  houseRules: String
  lastScraped: Date
  reviewsCount: Int
}

input GetListings {
  listingUrl: String
  name: String
  minimumNights: Int
  maximumNights: Int
  accommodates: Int
  bedrooms: Float
  beds: Int
  bathrooms: Float
  createdAt: Date
  updatedAt: Date
  propertyType: String
  page: Int
  size: Int
  order: Order
  orderBy: ListingOrderBy
}

input UpdateListing {
  listingUrl: String
  name: String
  summary: String
  space: String
  description: String
  propertyType: String
  notes: String
  transit: String
  roomType: String
  bedType: String
  minimumNights: Int
  maximumNights: Int
  cancellationPolicy: String
  accommodates: Int
  bedrooms: Float
  beds: Int
  bathrooms: Float
  amenities: [String]
  neighborhoodOverview: String
  access: String
  interaction: String
  houseRules: String
  lastScraped: Date
  reviewsCount: Int
}

input CreateListing {
  listingUrl: String!
  name: String!
  summary: String!
  space: String!
  description: String!
  propertyType: String!
  notes: String!
  transit: String!
  roomType: String!
  bedType: String!
  minimumNights: Int!
  maximumNights: Int!
  cancellationPolicy: String!
  accommodates: Int!
  bedrooms: Float!
  beds: Int!
  bathrooms: Float!
  amenities: [String]
  neighborhoodOverview: String
  access: String
  interaction: String
  houseRules: String
  lastScraped: Date
  reviewsCount: Int
}

type QueryPageInfo {
  page: Int!
  count: Int!
  totalItems: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type QueryResponse {
  pageInfo: QueryPageInfo!
  edges: [Listing!]!
}

type Query {
  listings(where: GetListings): QueryResponse!
  listing(id: ID!): Listing!
}

type Mutation {
  createListing(data: CreateListing): Listing!
  updateListing(id: ID!, data: UpdateListing): Listing
  deleteListing(id: ID!): Listing
}
